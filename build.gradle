import com.bmuschko.gradle.cargo.convention.Deployable
import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.8.0'
    }
}

plugins {
    id 'java'
    id 'war'
}

apply plugin: 'com.bmuschko.cargo-base'

compileJava.options.encoding = 'UTF-8'

group 'uk.co.raubach.frickl'
version '1.2.0'

sourceCompatibility = 11

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/plugins-release/'
    }
    maven {
        url 'http://maven.imagej.net/content/repositories/public/'
    }
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])

    implementation 'org.slf4j:slf4j-api:1.7.30'

    implementation 'org.json:json:20160212'
    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'org.flywaydb:flyway-core:4.0.2'
    implementation 'mysql:mysql-connector-java:8.0.16'
    implementation 'org.jooq:jooq:3.11.10'
    implementation 'org.jooq:jooq-codegen:3.11.10'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'

    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-fileupload:commons-fileupload:1.4'
    implementation 'joda-time:joda-time:2.10.2'
    implementation 'com.drewnoakes:metadata-extractor:2.11.0'
    implementation 'com.adobe.xmp:xmpcore:5.1.3'

    implementation 'net.coobird:thumbnailator:0.4.11'

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.34'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.34'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.34'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.34'

    // CORS wizardry
    implementation 'com.thetransactioncompany:cors-filter:2.10'
}

// Runs the JOOQ code generation
task codegen (type: JavaExec) {
    group = 'Execution'
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.jooq.codegen.GenerationTool'
    args 'jooq.xml'
}

// Generate a .war file
war {
    dependsOn jar

    rootSpec.exclude('**/raubach/**/*.class')
    rootSpec.includeEmptyDirs = false

    // Include external .jar files
    classpath fileTree(dir:'build/libs/', include:'*.jar')

    // Set the classpath
    manifest {
        attributes('Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
    }

    webInf {
        // Include the .properties file into the classes folder
        from(project.projectDir.toString()) {
            include 'config.properties'
            include 'logging.properties'
            into('classes')
        }
    }

    // Include the client code if it's available
    from("${project.projectDir.toString()}/client") {
        include '**/**.*'
        into('/')
    }
}

task getHomeDir {
    doLast {
        println gradle.gradleHomeDir
    }
}

// Deploy the created .war file to Tomcat
task deployTomcat (type: CargoRedeployRemote) {
    dependsOn = [war]
    containerId = project.findProperty('tomcat.manager.version') ?: "tomcat8x"
    protocol = project.findProperty('tomcat.manager.protocol') ?: "http"
    hostname = project.findProperty('tomcat.manager.hostname') ?: "localhost"
    port = (project.findProperty('tomcat.manager.port') ?: "8080") as Integer
    username = project.findProperty('tomcat.manager.username') ?: ""
    password = project.findProperty('tomcat.manager.password') ?: ""
    deployables = [new Deployable(files: project.files([war]), context: "${project.'project.name'}/v${project.version}")]
}
