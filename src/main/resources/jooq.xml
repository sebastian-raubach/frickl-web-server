<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd">
	<!-- Configure the database connection here -->
	<jdbc>
		<driver>com.mysql.cj.jdbc.Driver</driver>
		<url>jdbc:mysql://localhost/frickl</url>
		<user>root</user>
		<password></password>

		<!-- You can also pass user/password and other JDBC properties in the optional properties tag: -->
		<properties>
			<property>
				<key>user</key>
				<value>root</value>
			</property>
			<property>
				<key>password</key>
				<value></value>
			</property>
		</properties>
	</jdbc>

	<generator>
		<database>
			<forcedTypes>
				<forcedType>
					<userType>raubach.frickl.next.pojo.Exif</userType>
					<binding>raubach.frickl.next.binding.JsonExifBinding</binding>
					<expression>.*\.(images)\..*</expression>
					<types>.*json.*</types>
				</forcedType>
				<forcedType>
					<userType>raubach.frickl.next.pojo.Exif</userType>
					<binding>raubach.frickl.next.binding.JsonExifBinding</binding>
					<expression>.*\.(lat_lngs)\..*</expression>
					<types>.*json.*</types>
				</forcedType>
			</forcedTypes>
			<!-- The database dialect from jooq-meta. Available dialects are
				 named org.jooq.meta.[database].[database]Database.

				 Natively supported values are:

					 org.jooq.meta.ase.ASEDatabase
					 org.jooq.meta.auroramysql.AuroraMySQLDatabase
					 org.jooq.meta.aurorapostgres.AuroraPostgresDatabase
					 org.jooq.meta.cubrid.CUBRIDDatabase
					 org.jooq.meta.db2.DB2Database
					 org.jooq.meta.derby.DerbyDatabase
					 org.jooq.meta.firebird.FirebirdDatabase
					 org.jooq.meta.h2.H2Database
					 org.jooq.meta.hana.HANADatabase
					 org.jooq.meta.hsqldb.HSQLDBDatabase
					 org.jooq.meta.informix.InformixDatabase
					 org.jooq.meta.ingres.IngresDatabase
					 org.jooq.meta.mariadb.MariaDBDatabase

					 org.jooq.meta.oracle.OracleDatabase
					 org.jooq.meta.postgres.PostgresDatabase
					 org.jooq.meta.redshift.RedshiftDatabase
					 org.jooq.meta.sqldatawarehouse.SQLDataWarehouseDatabase
					 org.jooq.meta.sqlite.SQLiteDatabase
					 org.jooq.meta.sqlserver.SQLServerDatabase
					 org.jooq.meta.sybase.SybaseDatabase
					 org.jooq.meta.teradata.TeradataDatabase
					 org.jooq.meta.vertica.VerticaDatabase

				 This value can be used to reverse-engineer generic JDBC DatabaseMetaData (e.g. for MS Access)

					 org.jooq.meta.jdbc.JDBCDatabase

				 This value can be used to reverse-engineer standard jOOQ-meta XML formats

					 org.jooq.meta.xml.XMLDatabase

				 This value can be used to reverse-engineer schemas defined by SQL files (requires jooq-meta-extensions dependency)

					 org.jooq.meta.extensions.ddl.DDLDatabase

				 This value can be used to reverse-engineer schemas defined by JPA annotated entities (requires jooq-meta-extensions dependency)

					 org.jooq.meta.extensions.jpa.JPADatabase

				 You can also provide your own org.jooq.meta.Database implementation
				 here, if your database is currently not supported -->
			<name>org.jooq.meta.mysql.MySQLDatabase</name>

			<!-- All elements that are generated from your schema (A Java regular expression.
				 Use the pipe to separate several expressions) Watch out for
				 case-sensitivity. Depending on your database, this might be
				 important!

				 You can create case-insensitive regular expressions using this syntax: (?i:expr)

				 Whitespace is ignored and comments are possible.
				 -->
			<includes>.*</includes>

			<!-- All elements that are excluded from your schema (A Java regular expression.
				 Use the pipe to separate several expressions). Excludes match before
				 includes, i.e. excludes have a higher priority -->
			<excludes>
			</excludes>

			<!-- The schema that is used locally as a source for meta information.
				 This could be your development schema or the production schema, etc
				 This cannot be combined with the schemata element.

				 If left empty, jOOQ will generate all available schemata. See the
				 manual's next section to learn how to generate several schemata -->
			<inputSchema>frickl</inputSchema>
			<outputSchema>frickl</outputSchema>
		</database>

		<generate>
			<!-- Generation flags: See advanced configuration properties -->
			<javaTimeTypes>false</javaTimeTypes>
			<pojos>true</pojos>
		</generate>

		<target>
			<!-- The destination package of your generated classes (within the
				 destination directory)

				 jOOQ may append the schema name to this package if generating multiple schemas,
				 e.g. org.jooq.your.packagename.schema1
					  org.jooq.your.packagename.schema2 -->
			<packageName>raubach.frickl.next.codegen</packageName>

			<!-- The destination directory of your generated classes -->
			<directory>src/main/java/</directory>
		</target>
	</generator>
</configuration>