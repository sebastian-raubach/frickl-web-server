/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables.records;


import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import raubach.frickl.next.codegen.tables.AlbumCounts;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumCountsRecord extends UpdatableRecordImpl<AlbumCountsRecord> implements Record7<Integer, Integer, Integer, Integer, Integer, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>frickl.album_counts.album_id</code>.
     */
    public void setAlbumId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>frickl.album_counts.album_id</code>.
     */
    public Integer getAlbumId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>frickl.album_counts.image_count</code>.
     */
    public void setImageCount(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>frickl.album_counts.image_count</code>.
     */
    public Integer getImageCount() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>frickl.album_counts.image_count_public</code>.
     */
    public void setImageCountPublic(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>frickl.album_counts.image_count_public</code>.
     */
    public Integer getImageCountPublic() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>frickl.album_counts.album_count</code>.
     */
    public void setAlbumCount(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>frickl.album_counts.album_count</code>.
     */
    public Integer getAlbumCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>frickl.album_counts.image_view_count</code>.
     */
    public void setImageViewCount(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>frickl.album_counts.image_view_count</code>.
     */
    public Integer getImageViewCount() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>frickl.album_counts.newest_image</code>.
     */
    public void setNewestImage(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>frickl.album_counts.newest_image</code>.
     */
    public Timestamp getNewestImage() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>frickl.album_counts.oldest_image</code>.
     */
    public void setOldestImage(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>frickl.album_counts.oldest_image</code>.
     */
    public Timestamp getOldestImage() {
        return (Timestamp) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, Integer, Integer, Integer, Integer, Timestamp, Timestamp> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AlbumCounts.ALBUM_COUNTS.ALBUM_ID;
    }

    @Override
    public Field<Integer> field2() {
        return AlbumCounts.ALBUM_COUNTS.IMAGE_COUNT;
    }

    @Override
    public Field<Integer> field3() {
        return AlbumCounts.ALBUM_COUNTS.IMAGE_COUNT_PUBLIC;
    }

    @Override
    public Field<Integer> field4() {
        return AlbumCounts.ALBUM_COUNTS.ALBUM_COUNT;
    }

    @Override
    public Field<Integer> field5() {
        return AlbumCounts.ALBUM_COUNTS.IMAGE_VIEW_COUNT;
    }

    @Override
    public Field<Timestamp> field6() {
        return AlbumCounts.ALBUM_COUNTS.NEWEST_IMAGE;
    }

    @Override
    public Field<Timestamp> field7() {
        return AlbumCounts.ALBUM_COUNTS.OLDEST_IMAGE;
    }

    @Override
    public Integer component1() {
        return getAlbumId();
    }

    @Override
    public Integer component2() {
        return getImageCount();
    }

    @Override
    public Integer component3() {
        return getImageCountPublic();
    }

    @Override
    public Integer component4() {
        return getAlbumCount();
    }

    @Override
    public Integer component5() {
        return getImageViewCount();
    }

    @Override
    public Timestamp component6() {
        return getNewestImage();
    }

    @Override
    public Timestamp component7() {
        return getOldestImage();
    }

    @Override
    public Integer value1() {
        return getAlbumId();
    }

    @Override
    public Integer value2() {
        return getImageCount();
    }

    @Override
    public Integer value3() {
        return getImageCountPublic();
    }

    @Override
    public Integer value4() {
        return getAlbumCount();
    }

    @Override
    public Integer value5() {
        return getImageViewCount();
    }

    @Override
    public Timestamp value6() {
        return getNewestImage();
    }

    @Override
    public Timestamp value7() {
        return getOldestImage();
    }

    @Override
    public AlbumCountsRecord value1(Integer value) {
        setAlbumId(value);
        return this;
    }

    @Override
    public AlbumCountsRecord value2(Integer value) {
        setImageCount(value);
        return this;
    }

    @Override
    public AlbumCountsRecord value3(Integer value) {
        setImageCountPublic(value);
        return this;
    }

    @Override
    public AlbumCountsRecord value4(Integer value) {
        setAlbumCount(value);
        return this;
    }

    @Override
    public AlbumCountsRecord value5(Integer value) {
        setImageViewCount(value);
        return this;
    }

    @Override
    public AlbumCountsRecord value6(Timestamp value) {
        setNewestImage(value);
        return this;
    }

    @Override
    public AlbumCountsRecord value7(Timestamp value) {
        setOldestImage(value);
        return this;
    }

    @Override
    public AlbumCountsRecord values(Integer value1, Integer value2, Integer value3, Integer value4, Integer value5, Timestamp value6, Timestamp value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumCountsRecord
     */
    public AlbumCountsRecord() {
        super(AlbumCounts.ALBUM_COUNTS);
    }

    /**
     * Create a detached, initialised AlbumCountsRecord
     */
    public AlbumCountsRecord(Integer albumId, Integer imageCount, Integer imageCountPublic, Integer albumCount, Integer imageViewCount, Timestamp newestImage, Timestamp oldestImage) {
        super(AlbumCounts.ALBUM_COUNTS);

        setAlbumId(albumId);
        setImageCount(imageCount);
        setImageCountPublic(imageCountPublic);
        setAlbumCount(albumCount);
        setImageViewCount(imageViewCount);
        setNewestImage(newestImage);
        setOldestImage(oldestImage);
    }

    /**
     * Create a detached, initialised AlbumCountsRecord
     */
    public AlbumCountsRecord(raubach.frickl.next.codegen.tables.pojos.AlbumCounts value) {
        super(AlbumCounts.ALBUM_COUNTS);

        if (value != null) {
            setAlbumId(value.getAlbumId());
            setImageCount(value.getImageCount());
            setImageCountPublic(value.getImageCountPublic());
            setAlbumCount(value.getAlbumCount());
            setImageViewCount(value.getImageViewCount());
            setNewestImage(value.getNewestImage());
            setOldestImage(value.getOldestImage());
        }
    }
}
