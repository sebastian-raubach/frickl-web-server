/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;

import raubach.frickl.next.codegen.enums.LatLngsDataType;
import raubach.frickl.next.pojo.Exif;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LatLngs implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer         id;
    private String          path;
    private String          name;
    private Byte            isFavorite;
    private Exif            exif;
    private Integer         albumId;
    private Byte            isPublic;
    private Integer         viewCount;
    private LatLngsDataType dataType;
    private Timestamp       createdOn;
    private Timestamp       updatedOn;
    private BigDecimal      latitude;
    private BigDecimal      longitude;

    public LatLngs() {}

    public LatLngs(LatLngs value) {
        this.id = value.id;
        this.path = value.path;
        this.name = value.name;
        this.isFavorite = value.isFavorite;
        this.exif = value.exif;
        this.albumId = value.albumId;
        this.isPublic = value.isPublic;
        this.viewCount = value.viewCount;
        this.dataType = value.dataType;
        this.createdOn = value.createdOn;
        this.updatedOn = value.updatedOn;
        this.latitude = value.latitude;
        this.longitude = value.longitude;
    }

    public LatLngs(
        Integer         id,
        String          path,
        String          name,
        Byte            isFavorite,
        Exif            exif,
        Integer         albumId,
        Byte            isPublic,
        Integer         viewCount,
        LatLngsDataType dataType,
        Timestamp       createdOn,
        Timestamp       updatedOn,
        BigDecimal      latitude,
        BigDecimal      longitude
    ) {
        this.id = id;
        this.path = path;
        this.name = name;
        this.isFavorite = isFavorite;
        this.exif = exif;
        this.albumId = albumId;
        this.isPublic = isPublic;
        this.viewCount = viewCount;
        this.dataType = dataType;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
        this.latitude = latitude;
        this.longitude = longitude;
    }

    /**
     * Getter for <code>frickl.lat_lngs.id</code>. Auto incremented id of this
     * table.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>frickl.lat_lngs.id</code>. Auto incremented id of this
     * table.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>frickl.lat_lngs.path</code>. The path to the image
     * relative to the base path of the setup.
     */
    public String getPath() {
        return this.path;
    }

    /**
     * Setter for <code>frickl.lat_lngs.path</code>. The path to the image
     * relative to the base path of the setup.
     */
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for <code>frickl.lat_lngs.name</code>. The name of the image. This
     * will be the filename.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>frickl.lat_lngs.name</code>. The name of the image. This
     * will be the filename.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>frickl.lat_lngs.is_favorite</code>. Boolean deciding if
     * this image is one of the favorites.
     */
    public Byte getIsFavorite() {
        return this.isFavorite;
    }

    /**
     * Setter for <code>frickl.lat_lngs.is_favorite</code>. Boolean deciding if
     * this image is one of the favorites.
     */
    public void setIsFavorite(Byte isFavorite) {
        this.isFavorite = isFavorite;
    }

    /**
     * Getter for <code>frickl.lat_lngs.exif</code>. Optional Exif information
     * in JSON format.
     */
    public Exif getExif() {
        return this.exif;
    }

    /**
     * Setter for <code>frickl.lat_lngs.exif</code>. Optional Exif information
     * in JSON format.
     */
    public void setExif(Exif exif) {
        this.exif = exif;
    }

    /**
     * Getter for <code>frickl.lat_lngs.album_id</code>. The album this image
     * belongs to. This will be the containing folder.
     */
    public Integer getAlbumId() {
        return this.albumId;
    }

    /**
     * Setter for <code>frickl.lat_lngs.album_id</code>. The album this image
     * belongs to. This will be the containing folder.
     */
    public void setAlbumId(Integer albumId) {
        this.albumId = albumId;
    }

    /**
     * Getter for <code>frickl.lat_lngs.is_public</code>.
     */
    public Byte getIsPublic() {
        return this.isPublic;
    }

    /**
     * Setter for <code>frickl.lat_lngs.is_public</code>.
     */
    public void setIsPublic(Byte isPublic) {
        this.isPublic = isPublic;
    }

    /**
     * Getter for <code>frickl.lat_lngs.view_count</code>.
     */
    public Integer getViewCount() {
        return this.viewCount;
    }

    /**
     * Setter for <code>frickl.lat_lngs.view_count</code>.
     */
    public void setViewCount(Integer viewCount) {
        this.viewCount = viewCount;
    }

    /**
     * Getter for <code>frickl.lat_lngs.data_type</code>.
     */
    public LatLngsDataType getDataType() {
        return this.dataType;
    }

    /**
     * Setter for <code>frickl.lat_lngs.data_type</code>.
     */
    public void setDataType(LatLngsDataType dataType) {
        this.dataType = dataType;
    }

    /**
     * Getter for <code>frickl.lat_lngs.created_on</code>. When this record has
     * been created.
     */
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Setter for <code>frickl.lat_lngs.created_on</code>. When this record has
     * been created.
     */
    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for <code>frickl.lat_lngs.updated_on</code>. When this record has
     * last been updated.
     */
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Setter for <code>frickl.lat_lngs.updated_on</code>. When this record has
     * last been updated.
     */
    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    /**
     * Getter for <code>frickl.lat_lngs.latitude</code>.
     */
    public BigDecimal getLatitude() {
        return this.latitude;
    }

    /**
     * Setter for <code>frickl.lat_lngs.latitude</code>.
     */
    public void setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
    }

    /**
     * Getter for <code>frickl.lat_lngs.longitude</code>.
     */
    public BigDecimal getLongitude() {
        return this.longitude;
    }

    /**
     * Setter for <code>frickl.lat_lngs.longitude</code>.
     */
    public void setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("LatLngs (");

        sb.append(id);
        sb.append(", ").append(path);
        sb.append(", ").append(name);
        sb.append(", ").append(isFavorite);
        sb.append(", ").append(exif);
        sb.append(", ").append(albumId);
        sb.append(", ").append(isPublic);
        sb.append(", ").append(viewCount);
        sb.append(", ").append(dataType);
        sb.append(", ").append(createdOn);
        sb.append(", ").append(updatedOn);
        sb.append(", ").append(latitude);
        sb.append(", ").append(longitude);

        sb.append(")");
        return sb.toString();
    }
}
