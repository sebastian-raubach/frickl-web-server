/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables;


import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raubach.frickl.next.codegen.Frickl;
import raubach.frickl.next.codegen.tables.records.AlbumAccessTokenRecord;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumAccessToken extends TableImpl<AlbumAccessTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>frickl.album_access_token</code>
     */
    public static final AlbumAccessToken ALBUM_ACCESS_TOKEN = new AlbumAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumAccessTokenRecord> getRecordType() {
        return AlbumAccessTokenRecord.class;
    }

    /**
     * The column <code>frickl.album_access_token.album_id</code>. Auto
     * incremented id of this table.
     */
    public final TableField<AlbumAccessTokenRecord, Integer> ALBUM_ID = createField(DSL.name("album_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Auto incremented id of this table.");

    /**
     * The column <code>frickl.album_access_token.album_name</code>. The name of
     * the album. Should ideally be relatively short.
     */
    public final TableField<AlbumAccessTokenRecord, String> ALBUM_NAME = createField(DSL.name("album_name"), SQLDataType.VARCHAR(255), this, "The name of the album. Should ideally be relatively short.");

    /**
     * The column <code>frickl.album_access_token.album_description</code>.
     * Optional description of the album.
     */
    public final TableField<AlbumAccessTokenRecord, String> ALBUM_DESCRIPTION = createField(DSL.name("album_description"), SQLDataType.CLOB, this, "Optional description of the album.");

    /**
     * The column <code>frickl.album_access_token.token_id</code>. Auto
     * incremented id of this table.
     */
    public final TableField<AlbumAccessTokenRecord, Integer> TOKEN_ID = createField(DSL.name("token_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Auto incremented id of this table.");

    /**
     * The column <code>frickl.album_access_token.token_token</code>. The access
     * token.
     */
    public final TableField<AlbumAccessTokenRecord, String> TOKEN_TOKEN = createField(DSL.name("token_token"), SQLDataType.VARCHAR(36).nullable(false), this, "The access token.");

    /**
     * The column <code>frickl.album_access_token.token_expires_on</code>. When
     * this token expires.
     */
    public final TableField<AlbumAccessTokenRecord, Timestamp> TOKEN_EXPIRES_ON = createField(DSL.name("token_expires_on"), SQLDataType.TIMESTAMP(0), this, "When this token expires.");

    private AlbumAccessToken(Name alias, Table<AlbumAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumAccessToken(Name alias, Table<AlbumAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `album_access_token` as select `frickl`.`albums`.`id` AS `album_id`,`frickl`.`albums`.`name` AS `album_name`,`frickl`.`albums`.`description` AS `album_description`,`frickl`.`access_tokens`.`id` AS `token_id`,`frickl`.`access_tokens`.`token` AS `token_token`,`frickl`.`access_tokens`.`expires_on` AS `token_expires_on` from ((`frickl`.`access_tokens` left join `frickl`.`album_tokens` on((`frickl`.`album_tokens`.`access_token_id` = `frickl`.`access_tokens`.`id`))) left join `frickl`.`albums` on((`frickl`.`albums`.`id` = `frickl`.`album_tokens`.`album_id`)))"));
    }

    /**
     * Create an aliased <code>frickl.album_access_token</code> table reference
     */
    public AlbumAccessToken(String alias) {
        this(DSL.name(alias), ALBUM_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>frickl.album_access_token</code> table reference
     */
    public AlbumAccessToken(Name alias) {
        this(alias, ALBUM_ACCESS_TOKEN);
    }

    /**
     * Create a <code>frickl.album_access_token</code> table reference
     */
    public AlbumAccessToken() {
        this(DSL.name("album_access_token"), null);
    }

    public <O extends Record> AlbumAccessToken(Table<O> child, ForeignKey<O, AlbumAccessTokenRecord> key) {
        super(child, key, ALBUM_ACCESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Frickl.FRICKL;
    }

    @Override
    public AlbumAccessToken as(String alias) {
        return new AlbumAccessToken(DSL.name(alias), this);
    }

    @Override
    public AlbumAccessToken as(Name alias) {
        return new AlbumAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumAccessToken rename(String name) {
        return new AlbumAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumAccessToken rename(Name name) {
        return new AlbumAccessToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Integer, String, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
