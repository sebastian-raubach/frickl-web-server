/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raubach.frickl.next.codegen.Frickl;
import raubach.frickl.next.codegen.tables.records.StatsCameraRecord;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatsCamera extends TableImpl<StatsCameraRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>frickl.stats_camera</code>
     */
    public static final StatsCamera STATS_CAMERA = new StatsCamera();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatsCameraRecord> getRecordType() {
        return StatsCameraRecord.class;
    }

    /**
     * The column <code>frickl.stats_camera.camera</code>.
     */
    public final TableField<StatsCameraRecord, String> CAMERA = createField(DSL.name("camera"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>frickl.stats_camera.count</code>.
     */
    public final TableField<StatsCameraRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private StatsCamera(Name alias, Table<StatsCameraRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatsCamera(Name alias, Table<StatsCameraRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `stats_camera` as select concat(json_unquote(json_extract(`frickl`.`images`.`exif`,'$.cameraMake')),' ',json_unquote(json_extract(`frickl`.`images`.`exif`,'$.cameraModel'))) AS `camera`,count(1) AS `count` from `frickl`.`images` where (json_unquote(json_extract(`frickl`.`images`.`exif`,'$.cameraMake')) is not null) group by `camera` order by `count` desc"));
    }

    /**
     * Create an aliased <code>frickl.stats_camera</code> table reference
     */
    public StatsCamera(String alias) {
        this(DSL.name(alias), STATS_CAMERA);
    }

    /**
     * Create an aliased <code>frickl.stats_camera</code> table reference
     */
    public StatsCamera(Name alias) {
        this(alias, STATS_CAMERA);
    }

    /**
     * Create a <code>frickl.stats_camera</code> table reference
     */
    public StatsCamera() {
        this(DSL.name("stats_camera"), null);
    }

    public <O extends Record> StatsCamera(Table<O> child, ForeignKey<O, StatsCameraRecord> key) {
        super(child, key, STATS_CAMERA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Frickl.FRICKL;
    }

    @Override
    public StatsCamera as(String alias) {
        return new StatsCamera(DSL.name(alias), this);
    }

    @Override
    public StatsCamera as(Name alias) {
        return new StatsCamera(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsCamera rename(String name) {
        return new StatsCamera(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsCamera rename(Name name) {
        return new StatsCamera(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
