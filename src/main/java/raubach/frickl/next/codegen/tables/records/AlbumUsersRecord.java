/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables.records;


import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import raubach.frickl.next.codegen.tables.AlbumUsers;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumUsersRecord extends UpdatableRecordImpl<AlbumUsersRecord> implements Record4<Integer, Integer, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>frickl.album_users.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>frickl.album_users.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>frickl.album_users.album_id</code>.
     */
    public void setAlbumId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>frickl.album_users.album_id</code>.
     */
    public Integer getAlbumId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>frickl.album_users.created_on</code>.
     */
    public void setCreatedOn(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>frickl.album_users.created_on</code>.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>frickl.album_users.updated_on</code>.
     */
    public void setUpdatedOn(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>frickl.album_users.updated_on</code>.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AlbumUsers.ALBUM_USERS.USER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return AlbumUsers.ALBUM_USERS.ALBUM_ID;
    }

    @Override
    public Field<Timestamp> field3() {
        return AlbumUsers.ALBUM_USERS.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field4() {
        return AlbumUsers.ALBUM_USERS.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getUserId();
    }

    @Override
    public Integer component2() {
        return getAlbumId();
    }

    @Override
    public Timestamp component3() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component4() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getUserId();
    }

    @Override
    public Integer value2() {
        return getAlbumId();
    }

    @Override
    public Timestamp value3() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value4() {
        return getUpdatedOn();
    }

    @Override
    public AlbumUsersRecord value1(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public AlbumUsersRecord value2(Integer value) {
        setAlbumId(value);
        return this;
    }

    @Override
    public AlbumUsersRecord value3(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public AlbumUsersRecord value4(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public AlbumUsersRecord values(Integer value1, Integer value2, Timestamp value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumUsersRecord
     */
    public AlbumUsersRecord() {
        super(AlbumUsers.ALBUM_USERS);
    }

    /**
     * Create a detached, initialised AlbumUsersRecord
     */
    public AlbumUsersRecord(Integer userId, Integer albumId, Timestamp createdOn, Timestamp updatedOn) {
        super(AlbumUsers.ALBUM_USERS);

        setUserId(userId);
        setAlbumId(albumId);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised AlbumUsersRecord
     */
    public AlbumUsersRecord(raubach.frickl.next.codegen.tables.pojos.AlbumUsers value) {
        super(AlbumUsers.ALBUM_USERS);

        if (value != null) {
            setUserId(value.getUserId());
            setAlbumId(value.getAlbumId());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
}
