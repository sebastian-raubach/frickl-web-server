/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raubach.frickl.next.codegen.Frickl;
import raubach.frickl.next.codegen.Indexes;
import raubach.frickl.next.codegen.Keys;
import raubach.frickl.next.codegen.tables.records.AlbumUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumUsers extends TableImpl<AlbumUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>frickl.album_users</code>
     */
    public static final AlbumUsers ALBUM_USERS = new AlbumUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumUsersRecord> getRecordType() {
        return AlbumUsersRecord.class;
    }

    /**
     * The column <code>frickl.album_users.user_id</code>.
     */
    public final TableField<AlbumUsersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>frickl.album_users.album_id</code>.
     */
    public final TableField<AlbumUsersRecord, Integer> ALBUM_ID = createField(DSL.name("album_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>frickl.album_users.created_on</code>.
     */
    public final TableField<AlbumUsersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>frickl.album_users.updated_on</code>.
     */
    public final TableField<AlbumUsersRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private AlbumUsers(Name alias, Table<AlbumUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumUsers(Name alias, Table<AlbumUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>frickl.album_users</code> table reference
     */
    public AlbumUsers(String alias) {
        this(DSL.name(alias), ALBUM_USERS);
    }

    /**
     * Create an aliased <code>frickl.album_users</code> table reference
     */
    public AlbumUsers(Name alias) {
        this(alias, ALBUM_USERS);
    }

    /**
     * Create a <code>frickl.album_users</code> table reference
     */
    public AlbumUsers() {
        this(DSL.name("album_users"), null);
    }

    public <O extends Record> AlbumUsers(Table<O> child, ForeignKey<O, AlbumUsersRecord> key) {
        super(child, key, ALBUM_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Frickl.FRICKL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALBUM_USERS_ALBUM_ID);
    }

    @Override
    public UniqueKey<AlbumUsersRecord> getPrimaryKey() {
        return Keys.KEY_ALBUM_USERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<AlbumUsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ALBUM_USERS_IBFK_1, Keys.ALBUM_USERS_IBFK_2);
    }

    private transient Users _users;
    private transient Albums _albums;

    /**
     * Get the implicit join path to the <code>frickl.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ALBUM_USERS_IBFK_1);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>frickl.albums</code> table.
     */
    public Albums albums() {
        if (_albums == null)
            _albums = new Albums(this, Keys.ALBUM_USERS_IBFK_2);

        return _albums;
    }

    @Override
    public AlbumUsers as(String alias) {
        return new AlbumUsers(DSL.name(alias), this);
    }

    @Override
    public AlbumUsers as(Name alias) {
        return new AlbumUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumUsers rename(String name) {
        return new AlbumUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumUsers rename(Name name) {
        return new AlbumUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
