/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen.tables.records;


import java.math.BigDecimal;
import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;

import raubach.frickl.next.codegen.enums.LatLngsDataType;
import raubach.frickl.next.codegen.tables.LatLngs;
import raubach.frickl.next.pojo.Exif;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LatLngsRecord extends TableRecordImpl<LatLngsRecord> implements Record13<Integer, String, String, Byte, Exif, Integer, Byte, Integer, LatLngsDataType, Timestamp, Timestamp, BigDecimal, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>frickl.lat_lngs.id</code>. Auto incremented id of this
     * table.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.id</code>. Auto incremented id of this
     * table.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>frickl.lat_lngs.path</code>. The path to the image
     * relative to the base path of the setup.
     */
    public void setPath(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.path</code>. The path to the image
     * relative to the base path of the setup.
     */
    public String getPath() {
        return (String) get(1);
    }

    /**
     * Setter for <code>frickl.lat_lngs.name</code>. The name of the image. This
     * will be the filename.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.name</code>. The name of the image. This
     * will be the filename.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>frickl.lat_lngs.is_favorite</code>. Boolean deciding if
     * this image is one of the favorites.
     */
    public void setIsFavorite(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.is_favorite</code>. Boolean deciding if
     * this image is one of the favorites.
     */
    public Byte getIsFavorite() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>frickl.lat_lngs.exif</code>. Optional Exif information
     * in JSON format.
     */
    public void setExif(Exif value) {
        set(4, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.exif</code>. Optional Exif information
     * in JSON format.
     */
    public Exif getExif() {
        return (Exif) get(4);
    }

    /**
     * Setter for <code>frickl.lat_lngs.album_id</code>. The album this image
     * belongs to. This will be the containing folder.
     */
    public void setAlbumId(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.album_id</code>. The album this image
     * belongs to. This will be the containing folder.
     */
    public Integer getAlbumId() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>frickl.lat_lngs.is_public</code>.
     */
    public void setIsPublic(Byte value) {
        set(6, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.is_public</code>.
     */
    public Byte getIsPublic() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>frickl.lat_lngs.view_count</code>.
     */
    public void setViewCount(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.view_count</code>.
     */
    public Integer getViewCount() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>frickl.lat_lngs.data_type</code>.
     */
    public void setDataType(LatLngsDataType value) {
        set(8, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.data_type</code>.
     */
    public LatLngsDataType getDataType() {
        return (LatLngsDataType) get(8);
    }

    /**
     * Setter for <code>frickl.lat_lngs.created_on</code>. When this record has
     * been created.
     */
    public void setCreatedOn(Timestamp value) {
        set(9, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.created_on</code>. When this record has
     * been created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(9);
    }

    /**
     * Setter for <code>frickl.lat_lngs.updated_on</code>. When this record has
     * last been updated.
     */
    public void setUpdatedOn(Timestamp value) {
        set(10, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.updated_on</code>. When this record has
     * last been updated.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(10);
    }

    /**
     * Setter for <code>frickl.lat_lngs.latitude</code>.
     */
    public void setLatitude(BigDecimal value) {
        set(11, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.latitude</code>.
     */
    public BigDecimal getLatitude() {
        return (BigDecimal) get(11);
    }

    /**
     * Setter for <code>frickl.lat_lngs.longitude</code>.
     */
    public void setLongitude(BigDecimal value) {
        set(12, value);
    }

    /**
     * Getter for <code>frickl.lat_lngs.longitude</code>.
     */
    public BigDecimal getLongitude() {
        return (BigDecimal) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, Byte, Exif, Integer, Byte, Integer, LatLngsDataType, Timestamp, Timestamp, BigDecimal, BigDecimal> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, String, String, Byte, Exif, Integer, Byte, Integer, LatLngsDataType, Timestamp, Timestamp, BigDecimal, BigDecimal> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return LatLngs.LAT_LNGS.ID;
    }

    @Override
    public Field<String> field2() {
        return LatLngs.LAT_LNGS.PATH;
    }

    @Override
    public Field<String> field3() {
        return LatLngs.LAT_LNGS.NAME;
    }

    @Override
    public Field<Byte> field4() {
        return LatLngs.LAT_LNGS.IS_FAVORITE;
    }

    @Override
    public Field<Exif> field5() {
        return LatLngs.LAT_LNGS.EXIF;
    }

    @Override
    public Field<Integer> field6() {
        return LatLngs.LAT_LNGS.ALBUM_ID;
    }

    @Override
    public Field<Byte> field7() {
        return LatLngs.LAT_LNGS.IS_PUBLIC;
    }

    @Override
    public Field<Integer> field8() {
        return LatLngs.LAT_LNGS.VIEW_COUNT;
    }

    @Override
    public Field<LatLngsDataType> field9() {
        return LatLngs.LAT_LNGS.DATA_TYPE;
    }

    @Override
    public Field<Timestamp> field10() {
        return LatLngs.LAT_LNGS.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field11() {
        return LatLngs.LAT_LNGS.UPDATED_ON;
    }

    @Override
    public Field<BigDecimal> field12() {
        return LatLngs.LAT_LNGS.LATITUDE;
    }

    @Override
    public Field<BigDecimal> field13() {
        return LatLngs.LAT_LNGS.LONGITUDE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPath();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Byte component4() {
        return getIsFavorite();
    }

    @Override
    public Exif component5() {
        return getExif();
    }

    @Override
    public Integer component6() {
        return getAlbumId();
    }

    @Override
    public Byte component7() {
        return getIsPublic();
    }

    @Override
    public Integer component8() {
        return getViewCount();
    }

    @Override
    public LatLngsDataType component9() {
        return getDataType();
    }

    @Override
    public Timestamp component10() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component11() {
        return getUpdatedOn();
    }

    @Override
    public BigDecimal component12() {
        return getLatitude();
    }

    @Override
    public BigDecimal component13() {
        return getLongitude();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPath();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Byte value4() {
        return getIsFavorite();
    }

    @Override
    public Exif value5() {
        return getExif();
    }

    @Override
    public Integer value6() {
        return getAlbumId();
    }

    @Override
    public Byte value7() {
        return getIsPublic();
    }

    @Override
    public Integer value8() {
        return getViewCount();
    }

    @Override
    public LatLngsDataType value9() {
        return getDataType();
    }

    @Override
    public Timestamp value10() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value11() {
        return getUpdatedOn();
    }

    @Override
    public BigDecimal value12() {
        return getLatitude();
    }

    @Override
    public BigDecimal value13() {
        return getLongitude();
    }

    @Override
    public LatLngsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public LatLngsRecord value2(String value) {
        setPath(value);
        return this;
    }

    @Override
    public LatLngsRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public LatLngsRecord value4(Byte value) {
        setIsFavorite(value);
        return this;
    }

    @Override
    public LatLngsRecord value5(Exif value) {
        setExif(value);
        return this;
    }

    @Override
    public LatLngsRecord value6(Integer value) {
        setAlbumId(value);
        return this;
    }

    @Override
    public LatLngsRecord value7(Byte value) {
        setIsPublic(value);
        return this;
    }

    @Override
    public LatLngsRecord value8(Integer value) {
        setViewCount(value);
        return this;
    }

    @Override
    public LatLngsRecord value9(LatLngsDataType value) {
        setDataType(value);
        return this;
    }

    @Override
    public LatLngsRecord value10(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public LatLngsRecord value11(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public LatLngsRecord value12(BigDecimal value) {
        setLatitude(value);
        return this;
    }

    @Override
    public LatLngsRecord value13(BigDecimal value) {
        setLongitude(value);
        return this;
    }

    @Override
    public LatLngsRecord values(Integer value1, String value2, String value3, Byte value4, Exif value5, Integer value6, Byte value7, Integer value8, LatLngsDataType value9, Timestamp value10, Timestamp value11, BigDecimal value12, BigDecimal value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LatLngsRecord
     */
    public LatLngsRecord() {
        super(LatLngs.LAT_LNGS);
    }

    /**
     * Create a detached, initialised LatLngsRecord
     */
    public LatLngsRecord(Integer id, String path, String name, Byte isFavorite, Exif exif, Integer albumId, Byte isPublic, Integer viewCount, LatLngsDataType dataType, Timestamp createdOn, Timestamp updatedOn, BigDecimal latitude, BigDecimal longitude) {
        super(LatLngs.LAT_LNGS);

        setId(id);
        setPath(path);
        setName(name);
        setIsFavorite(isFavorite);
        setExif(exif);
        setAlbumId(albumId);
        setIsPublic(isPublic);
        setViewCount(viewCount);
        setDataType(dataType);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
        setLatitude(latitude);
        setLongitude(longitude);
    }

    /**
     * Create a detached, initialised LatLngsRecord
     */
    public LatLngsRecord(raubach.frickl.next.codegen.tables.pojos.LatLngs value) {
        super(LatLngs.LAT_LNGS);

        if (value != null) {
            setId(value.getId());
            setPath(value.getPath());
            setName(value.getName());
            setIsFavorite(value.getIsFavorite());
            setExif(value.getExif());
            setAlbumId(value.getAlbumId());
            setIsPublic(value.getIsPublic());
            setViewCount(value.getViewCount());
            setDataType(value.getDataType());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
            setLatitude(value.getLatitude());
            setLongitude(value.getLongitude());
        }
    }
}
