/*
 * This file is generated by jOOQ.
 */
package raubach.frickl.next.codegen;


import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import raubach.frickl.next.codegen.tables.AlbumAccessToken;
import raubach.frickl.next.codegen.tables.AlbumCounts;
import raubach.frickl.next.codegen.tables.AlbumStats;
import raubach.frickl.next.codegen.tables.AlbumUsers;
import raubach.frickl.next.codegen.tables.Albums;
import raubach.frickl.next.codegen.tables.CalendarData;
import raubach.frickl.next.codegen.tables.ImageTags;
import raubach.frickl.next.codegen.tables.ImageTimeline;
import raubach.frickl.next.codegen.tables.Images;
import raubach.frickl.next.codegen.tables.LatLngs;
import raubach.frickl.next.codegen.tables.SchemaVersion;
import raubach.frickl.next.codegen.tables.StatsCamera;
import raubach.frickl.next.codegen.tables.Tags;
import raubach.frickl.next.codegen.tables.Users;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Frickl extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>frickl</code>
     */
    public static final Frickl FRICKL = new Frickl();

    /**
     * VIEW
     */
    public final AlbumAccessToken ALBUM_ACCESS_TOKEN = AlbumAccessToken.ALBUM_ACCESS_TOKEN;

    /**
     * The table <code>frickl.album_counts</code>.
     */
    public final AlbumCounts ALBUM_COUNTS = AlbumCounts.ALBUM_COUNTS;

    /**
     * VIEW
     */
    public final AlbumStats ALBUM_STATS = AlbumStats.ALBUM_STATS;

    /**
     * The table <code>frickl.album_users</code>.
     */
    public final AlbumUsers ALBUM_USERS = AlbumUsers.ALBUM_USERS;

    /**
     * This table contain  s all albums in Frickl. Albums correspond to image
     * folders on the file system.
     */
    public final Albums ALBUMS = Albums.ALBUMS;

    /**
     * VIEW
     */
    public final CalendarData CALENDAR_DATA = CalendarData.CALENDAR_DATA;

    /**
     * This table joins `images` and `tags` and therefore defines which tags an
     * image is tagged with.
     */
    public final ImageTags IMAGE_TAGS = ImageTags.IMAGE_TAGS;

    /**
     * VIEW
     */
    public final ImageTimeline IMAGE_TIMELINE = ImageTimeline.IMAGE_TIMELINE;

    /**
     * This table contains images from the file system.
     */
    public final Images IMAGES = Images.IMAGES;

    /**
     * VIEW
     */
    public final LatLngs LAT_LNGS = LatLngs.LAT_LNGS;

    /**
     * The table <code>frickl.schema_version</code>.
     */
    public final SchemaVersion SCHEMA_VERSION = SchemaVersion.SCHEMA_VERSION;

    /**
     * VIEW
     */
    public final StatsCamera STATS_CAMERA = StatsCamera.STATS_CAMERA;

    /**
     * This table contains all tags/keywords that have been defined and assigned
     * to images.
     */
    public final Tags TAGS = Tags.TAGS;

    /**
     * The table <code>frickl.users</code>.
     */
    public final Users USERS = Users.USERS;

    /**
     * No further instances allowed
     */
    private Frickl() {
        super("frickl", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            AlbumAccessToken.ALBUM_ACCESS_TOKEN,
            AlbumCounts.ALBUM_COUNTS,
            AlbumStats.ALBUM_STATS,
            AlbumUsers.ALBUM_USERS,
            Albums.ALBUMS,
            CalendarData.CALENDAR_DATA,
            ImageTags.IMAGE_TAGS,
            ImageTimeline.IMAGE_TIMELINE,
            Images.IMAGES,
            LatLngs.LAT_LNGS,
            SchemaVersion.SCHEMA_VERSION,
            StatsCamera.STATS_CAMERA,
            Tags.TAGS,
            Users.USERS
        );
    }
}
