/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import raubach.fricklweb.server.database.tables.AccessTokens;
import raubach.fricklweb.server.database.tables.AlbumCounts;
import raubach.fricklweb.server.database.tables.AlbumTokens;
import raubach.fricklweb.server.database.tables.Albums;
import raubach.fricklweb.server.database.tables.ImageTags;
import raubach.fricklweb.server.database.tables.Images;
import raubach.fricklweb.server.database.tables.SchemaVersion;
import raubach.fricklweb.server.database.tables.Tags;
import raubach.fricklweb.server.database.tables.records.AccessTokensRecord;
import raubach.fricklweb.server.database.tables.records.AlbumCountsRecord;
import raubach.fricklweb.server.database.tables.records.AlbumTokensRecord;
import raubach.fricklweb.server.database.tables.records.AlbumsRecord;
import raubach.fricklweb.server.database.tables.records.ImageTagsRecord;
import raubach.fricklweb.server.database.tables.records.ImagesRecord;
import raubach.fricklweb.server.database.tables.records.SchemaVersionRecord;
import raubach.fricklweb.server.database.tables.records.TagsRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * frickl.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccessTokensRecord> KEY_ACCESS_TOKENS_PRIMARY = Internal.createUniqueKey(AccessTokens.ACCESS_TOKENS, DSL.name("KEY_access_tokens_PRIMARY"), new TableField[] { AccessTokens.ACCESS_TOKENS.ID }, true);
    public static final UniqueKey<AlbumCountsRecord> KEY_ALBUM_COUNTS_PRIMARY = Internal.createUniqueKey(AlbumCounts.ALBUM_COUNTS, DSL.name("KEY_album_counts_PRIMARY"), new TableField[] { AlbumCounts.ALBUM_COUNTS.ALBUM_ID }, true);
    public static final UniqueKey<AlbumTokensRecord> KEY_ALBUM_TOKENS_PRIMARY = Internal.createUniqueKey(AlbumTokens.ALBUM_TOKENS, DSL.name("KEY_album_tokens_PRIMARY"), new TableField[] { AlbumTokens.ALBUM_TOKENS.ALBUM_ID, AlbumTokens.ALBUM_TOKENS.ACCESS_TOKEN_ID }, true);
    public static final UniqueKey<AlbumsRecord> KEY_ALBUMS_PRIMARY = Internal.createUniqueKey(Albums.ALBUMS, DSL.name("KEY_albums_PRIMARY"), new TableField[] { Albums.ALBUMS.ID }, true);
    public static final UniqueKey<ImageTagsRecord> KEY_IMAGE_TAGS_PRIMARY = Internal.createUniqueKey(ImageTags.IMAGE_TAGS, DSL.name("KEY_image_tags_PRIMARY"), new TableField[] { ImageTags.IMAGE_TAGS.IMAGE_ID, ImageTags.IMAGE_TAGS.TAG_ID }, true);
    public static final UniqueKey<ImagesRecord> KEY_IMAGES_PRIMARY = Internal.createUniqueKey(Images.IMAGES, DSL.name("KEY_images_PRIMARY"), new TableField[] { Images.IMAGES.ID }, true);
    public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = Internal.createUniqueKey(SchemaVersion.SCHEMA_VERSION, DSL.name("KEY_schema_version_PRIMARY"), new TableField[] { SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK }, true);
    public static final UniqueKey<TagsRecord> KEY_TAGS_PRIMARY = Internal.createUniqueKey(Tags.TAGS, DSL.name("KEY_tags_PRIMARY"), new TableField[] { Tags.TAGS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AlbumCountsRecord, AlbumsRecord> ALBUM_COUNTS_IBFK_1 = Internal.createForeignKey(AlbumCounts.ALBUM_COUNTS, DSL.name("album_counts_ibfk_1"), new TableField[] { AlbumCounts.ALBUM_COUNTS.ALBUM_ID }, Keys.KEY_ALBUMS_PRIMARY, new TableField[] { Albums.ALBUMS.ID }, true);
    public static final ForeignKey<AlbumTokensRecord, AlbumsRecord> ALBUM_TOKENS_IBFK_1 = Internal.createForeignKey(AlbumTokens.ALBUM_TOKENS, DSL.name("album_tokens_ibfk_1"), new TableField[] { AlbumTokens.ALBUM_TOKENS.ALBUM_ID }, Keys.KEY_ALBUMS_PRIMARY, new TableField[] { Albums.ALBUMS.ID }, true);
    public static final ForeignKey<AlbumTokensRecord, AccessTokensRecord> ALBUM_TOKENS_IBFK_2 = Internal.createForeignKey(AlbumTokens.ALBUM_TOKENS, DSL.name("album_tokens_ibfk_2"), new TableField[] { AlbumTokens.ALBUM_TOKENS.ACCESS_TOKEN_ID }, Keys.KEY_ACCESS_TOKENS_PRIMARY, new TableField[] { AccessTokens.ACCESS_TOKENS.ID }, true);
    public static final ForeignKey<AlbumsRecord, ImagesRecord> ALBUMS_IBFK_1 = Internal.createForeignKey(Albums.ALBUMS, DSL.name("albums_ibfk_1"), new TableField[] { Albums.ALBUMS.BANNER_IMAGE_ID }, Keys.KEY_IMAGES_PRIMARY, new TableField[] { Images.IMAGES.ID }, true);
    public static final ForeignKey<AlbumsRecord, AlbumsRecord> ALBUMS_IBFK_2 = Internal.createForeignKey(Albums.ALBUMS, DSL.name("albums_ibfk_2"), new TableField[] { Albums.ALBUMS.PARENT_ALBUM_ID }, Keys.KEY_ALBUMS_PRIMARY, new TableField[] { Albums.ALBUMS.ID }, true);
    public static final ForeignKey<ImageTagsRecord, ImagesRecord> IMAGE_TAGS_IBFK_1 = Internal.createForeignKey(ImageTags.IMAGE_TAGS, DSL.name("image_tags_ibfk_1"), new TableField[] { ImageTags.IMAGE_TAGS.IMAGE_ID }, Keys.KEY_IMAGES_PRIMARY, new TableField[] { Images.IMAGES.ID }, true);
    public static final ForeignKey<ImageTagsRecord, TagsRecord> IMAGE_TAGS_IBFK_2 = Internal.createForeignKey(ImageTags.IMAGE_TAGS, DSL.name("image_tags_ibfk_2"), new TableField[] { ImageTags.IMAGE_TAGS.TAG_ID }, Keys.KEY_TAGS_PRIMARY, new TableField[] { Tags.TAGS.ID }, true);
    public static final ForeignKey<ImagesRecord, AlbumsRecord> IMAGES_IBFK_1 = Internal.createForeignKey(Images.IMAGES, DSL.name("images_ibfk_1"), new TableField[] { Images.IMAGES.ALBUM_ID }, Keys.KEY_ALBUMS_PRIMARY, new TableField[] { Albums.ALBUMS.ID }, true);
}
