/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import raubach.fricklweb.server.database.Frickl;
import raubach.fricklweb.server.database.Indexes;
import raubach.fricklweb.server.database.Keys;
import raubach.fricklweb.server.database.tables.records.AlbumCountsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumCounts extends TableImpl<AlbumCountsRecord> {

    private static final long serialVersionUID = 1440048773;

    /**
     * The reference instance of <code>frickl.album_counts</code>
     */
    public static final AlbumCounts ALBUM_COUNTS = new AlbumCounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumCountsRecord> getRecordType() {
        return AlbumCountsRecord.class;
    }

    /**
     * The column <code>frickl.album_counts.album_id</code>.
     */
    public final TableField<AlbumCountsRecord, Integer> ALBUM_ID = createField("album_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>frickl.album_counts.image_count</code>.
     */
    public final TableField<AlbumCountsRecord, Integer> IMAGE_COUNT = createField("image_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>frickl.album_counts.image_count_public</code>.
     */
    public final TableField<AlbumCountsRecord, Integer> IMAGE_COUNT_PUBLIC = createField("image_count_public", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>frickl.album_counts.album_count</code>.
     */
    public final TableField<AlbumCountsRecord, Integer> ALBUM_COUNT = createField("album_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>frickl.album_counts.image_view_count</code>.
     */
    public final TableField<AlbumCountsRecord, Integer> IMAGE_VIEW_COUNT = createField("image_view_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>frickl.album_counts.newest_image</code>.
     */
    public final TableField<AlbumCountsRecord, Timestamp> NEWEST_IMAGE = createField("newest_image", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>frickl.album_counts.oldest_image</code>.
     */
    public final TableField<AlbumCountsRecord, Timestamp> OLDEST_IMAGE = createField("oldest_image", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>frickl.album_counts</code> table reference
     */
    public AlbumCounts() {
        this(DSL.name("album_counts"), null);
    }

    /**
     * Create an aliased <code>frickl.album_counts</code> table reference
     */
    public AlbumCounts(String alias) {
        this(DSL.name(alias), ALBUM_COUNTS);
    }

    /**
     * Create an aliased <code>frickl.album_counts</code> table reference
     */
    public AlbumCounts(Name alias) {
        this(alias, ALBUM_COUNTS);
    }

    private AlbumCounts(Name alias, Table<AlbumCountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumCounts(Name alias, Table<AlbumCountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AlbumCounts(Table<O> child, ForeignKey<O, AlbumCountsRecord> key) {
        super(child, key, ALBUM_COUNTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Frickl.FRICKL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALBUM_COUNTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumCountsRecord> getPrimaryKey() {
        return Keys.KEY_ALBUM_COUNTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumCountsRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumCountsRecord>>asList(Keys.KEY_ALBUM_COUNTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AlbumCountsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlbumCountsRecord, ?>>asList(Keys.ALBUM_COUNTS_IBFK_1);
    }

    public Albums albums() {
        return new Albums(this, Keys.ALBUM_COUNTS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumCounts as(String alias) {
        return new AlbumCounts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumCounts as(Name alias) {
        return new AlbumCounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumCounts rename(String name) {
        return new AlbumCounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumCounts rename(Name name) {
        return new AlbumCounts(name, null);
    }
}
