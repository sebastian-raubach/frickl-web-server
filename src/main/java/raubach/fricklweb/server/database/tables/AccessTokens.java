/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import raubach.fricklweb.server.database.Frickl;
import raubach.fricklweb.server.database.Indexes;
import raubach.fricklweb.server.database.Keys;
import raubach.fricklweb.server.database.tables.records.AccessTokensRecord;


/**
 * This table contains all tokens that can be used to access folders that aren't
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessTokens extends TableImpl<AccessTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>frickl.access_tokens</code>
     */
    public static final AccessTokens ACCESS_TOKENS = new AccessTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessTokensRecord> getRecordType() {
        return AccessTokensRecord.class;
    }

    /**
     * The column <code>frickl.access_tokens.id</code>. Auto incremented id of
     * this table.
     */
    public final TableField<AccessTokensRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Auto incremented id of this table.");

    /**
     * The column <code>frickl.access_tokens.token</code>. The access token.
     */
    public final TableField<AccessTokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(36).nullable(false), this, "The access token.");

    /**
     * The column <code>frickl.access_tokens.expires_on</code>. When this token
     * expires.
     */
    public final TableField<AccessTokensRecord, Timestamp> EXPIRES_ON = createField(DSL.name("expires_on"), SQLDataType.TIMESTAMP(0), this, "When this token expires.");

    /**
     * The column <code>frickl.access_tokens.created_on</code>. When this record
     * has been created.
     */
    public final TableField<AccessTokensRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When this record has been created.");

    /**
     * The column <code>frickl.access_tokens.updated_on</code>. When this record
     * has last been updated.
     */
    public final TableField<AccessTokensRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "When this record has last been updated.");

    private AccessTokens(Name alias, Table<AccessTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessTokens(Name alias, Table<AccessTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table contains all tokens that can be used to access folders that aren't public."), TableOptions.table());
    }

    /**
     * Create an aliased <code>frickl.access_tokens</code> table reference
     */
    public AccessTokens(String alias) {
        this(DSL.name(alias), ACCESS_TOKENS);
    }

    /**
     * Create an aliased <code>frickl.access_tokens</code> table reference
     */
    public AccessTokens(Name alias) {
        this(alias, ACCESS_TOKENS);
    }

    /**
     * Create a <code>frickl.access_tokens</code> table reference
     */
    public AccessTokens() {
        this(DSL.name("access_tokens"), null);
    }

    public <O extends Record> AccessTokens(Table<O> child, ForeignKey<O, AccessTokensRecord> key) {
        super(child, key, ACCESS_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Frickl.FRICKL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACCESS_TOKENS_ACCESS_TOKENS_TOKEN);
    }

    @Override
    public Identity<AccessTokensRecord, Integer> getIdentity() {
        return (Identity<AccessTokensRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccessTokensRecord> getPrimaryKey() {
        return Keys.KEY_ACCESS_TOKENS_PRIMARY;
    }

    @Override
    public AccessTokens as(String alias) {
        return new AccessTokens(DSL.name(alias), this);
    }

    @Override
    public AccessTokens as(Name alias) {
        return new AccessTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessTokens rename(String name) {
        return new AccessTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessTokens rename(Name name) {
        return new AccessTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Timestamp, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
