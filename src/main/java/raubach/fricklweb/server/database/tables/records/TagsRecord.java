/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables.records;


import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import raubach.fricklweb.server.database.tables.Tags;


/**
 * This table contains all tags/keywords that have been defined and assigned to
 * images.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagsRecord extends UpdatableRecordImpl<TagsRecord> implements Record4<Integer, String, Timestamp, Timestamp> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>frickl.tags.id</code>. Auto incremented id of this
     * table.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>frickl.tags.id</code>. Auto incremented id of this
     * table.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>frickl.tags.name</code>. The name of this tag.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>frickl.tags.name</code>. The name of this tag.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>frickl.tags.created_on</code>. When this record has been
     * created.
     */
    public void setCreatedOn(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>frickl.tags.created_on</code>. When this record has been
     * created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>frickl.tags.updated_on</code>. When this record has last
     * been updated.
     */
    public void setUpdatedOn(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>frickl.tags.updated_on</code>. When this record has last
     * been updated.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Timestamp, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Tags.TAGS.ID;
    }

    @Override
    public Field<String> field2() {
        return Tags.TAGS.NAME;
    }

    @Override
    public Field<Timestamp> field3() {
        return Tags.TAGS.CREATED_ON;
    }

    @Override
    public Field<Timestamp> field4() {
        return Tags.TAGS.UPDATED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Timestamp component3() {
        return getCreatedOn();
    }

    @Override
    public Timestamp component4() {
        return getUpdatedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Timestamp value3() {
        return getCreatedOn();
    }

    @Override
    public Timestamp value4() {
        return getUpdatedOn();
    }

    @Override
    public TagsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TagsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TagsRecord value3(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public TagsRecord value4(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public TagsRecord values(Integer value1, String value2, Timestamp value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagsRecord
     */
    public TagsRecord() {
        super(Tags.TAGS);
    }

    /**
     * Create a detached, initialised TagsRecord
     */
    public TagsRecord(Integer id, String name, Timestamp createdOn, Timestamp updatedOn) {
        super(Tags.TAGS);

        setId(id);
        setName(name);
        setCreatedOn(createdOn);
        setUpdatedOn(updatedOn);
    }

    /**
     * Create a detached, initialised TagsRecord
     */
    public TagsRecord(raubach.fricklweb.server.database.tables.pojos.Tags value) {
        super(Tags.TAGS);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setCreatedOn(value.getCreatedOn());
            setUpdatedOn(value.getUpdatedOn());
        }
    }
}
