/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables.records;


import java.math.BigInteger;
import java.sql.Timestamp;

import jakarta.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.TableRecordImpl;

import raubach.fricklweb.server.database.tables.AlbumStats;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumStatsRecord extends TableRecordImpl<AlbumStatsRecord> implements Record14<Integer, String, String, String, Integer, Long, Integer, Timestamp, Timestamp, BigInteger, Timestamp, Timestamp, Long, Long> {

    private static final long serialVersionUID = -978685541;

    /**
     * Setter for <code>frickl.album_stats.id</code>. Auto incremented id of this table.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>frickl.album_stats.id</code>. Auto incremented id of this table.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>frickl.album_stats.name</code>. The name of the album. Should ideally be relatively short.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>frickl.album_stats.name</code>. The name of the album. Should ideally be relatively short.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>frickl.album_stats.description</code>. Optional description of the album.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>frickl.album_stats.description</code>. Optional description of the album.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>frickl.album_stats.path</code>. The path to the album relative to the base path of the setup.
     */
    public void setPath(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>frickl.album_stats.path</code>. The path to the album relative to the base path of the setup.
     */
    public String getPath() {
        return (String) get(3);
    }

    /**
     * Setter for <code>frickl.album_stats.banner_image_id</code>. Optional banner image id. This image will be shown to visually represent this album.
     */
    public void setBannerImageId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>frickl.album_stats.banner_image_id</code>. Optional banner image id. This image will be shown to visually represent this album.
     */
    public Integer getBannerImageId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>frickl.album_stats.banner_image_public_id</code>.
     */
    public void setBannerImagePublicId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>frickl.album_stats.banner_image_public_id</code>.
     */
    public Long getBannerImagePublicId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>frickl.album_stats.parent_album_id</code>. Optional parent album id. If this album is a sub-album of another album, this parent album can be defined here.
     */
    public void setParentAlbumId(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>frickl.album_stats.parent_album_id</code>. Optional parent album id. If this album is a sub-album of another album, this parent album can be defined here.
     */
    public Integer getParentAlbumId() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>frickl.album_stats.newest_image</code>.
     */
    public void setNewestImage(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>frickl.album_stats.newest_image</code>.
     */
    public Timestamp getNewestImage() {
        return (Timestamp) get(7);
    }

    /**
     * Setter for <code>frickl.album_stats.oldest_image</code>.
     */
    public void setOldestImage(Timestamp value) {
        set(8, value);
    }

    /**
     * Getter for <code>frickl.album_stats.oldest_image</code>.
     */
    public Timestamp getOldestImage() {
        return (Timestamp) get(8);
    }

    /**
     * Setter for <code>frickl.album_stats.image_view_count</code>.
     */
    public void setImageViewCount(BigInteger value) {
        set(9, value);
    }

    /**
     * Getter for <code>frickl.album_stats.image_view_count</code>.
     */
    public BigInteger getImageViewCount() {
        return (BigInteger) get(9);
    }

    /**
     * Setter for <code>frickl.album_stats.created_on</code>. When this record has been created.
     */
    public void setCreatedOn(Timestamp value) {
        set(10, value);
    }

    /**
     * Getter for <code>frickl.album_stats.created_on</code>. When this record has been created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(10);
    }

    /**
     * Setter for <code>frickl.album_stats.updated_on</code>. When this record has last been updated.
     */
    public void setUpdatedOn(Timestamp value) {
        set(11, value);
    }

    /**
     * Getter for <code>frickl.album_stats.updated_on</code>. When this record has last been updated.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(11);
    }

    /**
     * Setter for <code>frickl.album_stats.count</code>.
     */
    public void setCount(Long value) {
        set(12, value);
    }

    /**
     * Getter for <code>frickl.album_stats.count</code>.
     */
    public Long getCount() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>frickl.album_stats.count_public</code>.
     */
    public void setCountPublic(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>frickl.album_stats.count_public</code>.
     */
    public Long getCountPublic() {
        return (Long) get(13);
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row14<Integer, String, String, String, Integer, Long, Integer, Timestamp, Timestamp, BigInteger, Timestamp, Timestamp, Long, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row14<Integer, String, String, String, Integer, Long, Integer, Timestamp, Timestamp, BigInteger, Timestamp, Timestamp, Long, Long> valuesRow() {
        return (Row14) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return AlbumStats.ALBUM_STATS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return AlbumStats.ALBUM_STATS.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return AlbumStats.ALBUM_STATS.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return AlbumStats.ALBUM_STATS.PATH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return AlbumStats.ALBUM_STATS.BANNER_IMAGE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return AlbumStats.ALBUM_STATS.BANNER_IMAGE_PUBLIC_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return AlbumStats.ALBUM_STATS.PARENT_ALBUM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field8() {
        return AlbumStats.ALBUM_STATS.NEWEST_IMAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field9() {
        return AlbumStats.ALBUM_STATS.OLDEST_IMAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigInteger> field10() {
        return AlbumStats.ALBUM_STATS.IMAGE_VIEW_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field11() {
        return AlbumStats.ALBUM_STATS.CREATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field12() {
        return AlbumStats.ALBUM_STATS.UPDATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field13() {
        return AlbumStats.ALBUM_STATS.COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field14() {
        return AlbumStats.ALBUM_STATS.COUNT_PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getPath();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getBannerImageId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getBannerImagePublicId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component7() {
        return getParentAlbumId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component8() {
        return getNewestImage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component9() {
        return getOldestImage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger component10() {
        return getImageViewCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component11() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component12() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component13() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component14() {
        return getCountPublic();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getPath();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getBannerImageId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getBannerImagePublicId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getParentAlbumId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value8() {
        return getNewestImage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value9() {
        return getOldestImage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigInteger value10() {
        return getImageViewCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value11() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value12() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value13() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value14() {
        return getCountPublic();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value4(String value) {
        setPath(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value5(Integer value) {
        setBannerImageId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value6(Long value) {
        setBannerImagePublicId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value7(Integer value) {
        setParentAlbumId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value8(Timestamp value) {
        setNewestImage(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value9(Timestamp value) {
        setOldestImage(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value10(BigInteger value) {
        setImageViewCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value11(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value12(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value13(Long value) {
        setCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord value14(Long value) {
        setCountPublic(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AlbumStatsRecord values(Integer value1, String value2, String value3, String value4, Integer value5, Long value6, Integer value7, Timestamp value8, Timestamp value9, BigInteger value10, Timestamp value11, Timestamp value12, Long value13, Long value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumStatsRecord
     */
    public AlbumStatsRecord() {
        super(AlbumStats.ALBUM_STATS);
    }

    /**
     * Create a detached, initialised AlbumStatsRecord
     */
    public AlbumStatsRecord(Integer id, String name, String description, String path, Integer bannerImageId, Long bannerImagePublicId, Integer parentAlbumId, Timestamp newestImage, Timestamp oldestImage, BigInteger imageViewCount, Timestamp createdOn, Timestamp updatedOn, Long count, Long countPublic) {
        super(AlbumStats.ALBUM_STATS);

        set(0, id);
        set(1, name);
        set(2, description);
        set(3, path);
        set(4, bannerImageId);
        set(5, bannerImagePublicId);
        set(6, parentAlbumId);
        set(7, newestImage);
        set(8, oldestImage);
        set(9, imageViewCount);
        set(10, createdOn);
        set(11, updatedOn);
        set(12, count);
        set(13, countPublic);
    }
}
