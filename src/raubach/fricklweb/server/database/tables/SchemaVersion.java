/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import raubach.fricklweb.server.database.Frickl;
import raubach.fricklweb.server.database.Indexes;
import raubach.fricklweb.server.database.Keys;
import raubach.fricklweb.server.database.tables.records.SchemaVersionRecord;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.11.9"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SchemaVersion extends TableImpl<SchemaVersionRecord>
{

	/**
	 * The reference instance of <code>frickl.schema_version</code>
	 */
	public static final SchemaVersion SCHEMA_VERSION = new SchemaVersion();
	private static final long serialVersionUID = -143455682;
	/**
	 * The column <code>frickl.schema_version.installed_rank</code>.
	 */
	public final TableField<SchemaVersionRecord, Integer> INSTALLED_RANK = createField("installed_rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
	/**
	 * The column <code>frickl.schema_version.version</code>.
	 */
	public final TableField<SchemaVersionRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");
	/**
	 * The column <code>frickl.schema_version.description</code>.
	 */
	public final TableField<SchemaVersionRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");
	/**
	 * The column <code>frickl.schema_version.type</code>.
	 */
	public final TableField<SchemaVersionRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");
	/**
	 * The column <code>frickl.schema_version.script</code>.
	 */
	public final TableField<SchemaVersionRecord, String> SCRIPT = createField("script", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");
	/**
	 * The column <code>frickl.schema_version.checksum</code>.
	 */
	public final TableField<SchemaVersionRecord, Integer> CHECKSUM = createField("checksum", org.jooq.impl.SQLDataType.INTEGER, this, "");
	/**
	 * The column <code>frickl.schema_version.installed_by</code>.
	 */
	public final TableField<SchemaVersionRecord, String> INSTALLED_BY = createField("installed_by", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");
	/**
	 * The column <code>frickl.schema_version.installed_on</code>.
	 */
	public final TableField<SchemaVersionRecord, Timestamp> INSTALLED_ON = createField("installed_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
	/**
	 * The column <code>frickl.schema_version.execution_time</code>.
	 */
	public final TableField<SchemaVersionRecord, Integer> EXECUTION_TIME = createField("execution_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
	/**
	 * The column <code>frickl.schema_version.success</code>.
	 */
	public final TableField<SchemaVersionRecord, Byte> SUCCESS = createField("success", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

	/**
	 * Create a <code>frickl.schema_version</code> table reference
	 */
	public SchemaVersion()
	{
		this(DSL.name("schema_version"), null);
	}

	/**
	 * Create an aliased <code>frickl.schema_version</code> table reference
	 */
	public SchemaVersion(String alias)
	{
		this(DSL.name(alias), SCHEMA_VERSION);
	}

	/**
	 * Create an aliased <code>frickl.schema_version</code> table reference
	 */
	public SchemaVersion(Name alias)
	{
		this(alias, SCHEMA_VERSION);
	}

	private SchemaVersion(Name alias, Table<SchemaVersionRecord> aliased)
	{
		this(alias, aliased, null);
	}

	private SchemaVersion(Name alias, Table<SchemaVersionRecord> aliased, Field<?>[] parameters)
	{
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> SchemaVersion(Table<O> child, ForeignKey<O, SchemaVersionRecord> key)
	{
		super(child, key, SCHEMA_VERSION);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SchemaVersionRecord> getRecordType()
	{
		return SchemaVersionRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema()
	{
		return Frickl.FRICKL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes()
	{
		return Arrays.<Index>asList(Indexes.SCHEMA_VERSION_PRIMARY, Indexes.SCHEMA_VERSION_SCHEMA_VERSION_S_IDX);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SchemaVersionRecord> getPrimaryKey()
	{
		return Keys.KEY_SCHEMA_VERSION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SchemaVersionRecord>> getKeys()
	{
		return Arrays.<UniqueKey<SchemaVersionRecord>>asList(Keys.KEY_SCHEMA_VERSION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SchemaVersion as(String alias)
	{
		return new SchemaVersion(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SchemaVersion as(Name alias)
	{
		return new SchemaVersion(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public SchemaVersion rename(String name)
	{
		return new SchemaVersion(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public SchemaVersion rename(Name name)
	{
		return new SchemaVersion(name, null);
	}
}
