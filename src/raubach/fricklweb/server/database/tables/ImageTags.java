/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import raubach.fricklweb.server.database.Frickl;
import raubach.fricklweb.server.database.Indexes;
import raubach.fricklweb.server.database.Keys;
import raubach.fricklweb.server.database.tables.records.ImageTagsRecord;


/**
 * This table joins `images` and `tags` and therefore defines which tags an 
 * image is tagged with.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageTags extends TableImpl<ImageTagsRecord> {

    private static final long serialVersionUID = -1752508118;

    /**
     * The reference instance of <code>frickl.image_tags</code>
     */
    public static final ImageTags IMAGE_TAGS = new ImageTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageTagsRecord> getRecordType() {
        return ImageTagsRecord.class;
    }

    /**
     * The column <code>frickl.image_tags.image_id</code>. The foreign key id of the referenced image.
     */
    public final TableField<ImageTagsRecord, Integer> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The foreign key id of the referenced image.");

    /**
     * The column <code>frickl.image_tags.tag_id</code>. The foreign key id of the referenced tag.
     */
    public final TableField<ImageTagsRecord, Integer> TAG_ID = createField("tag_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The foreign key id of the referenced tag.");

    /**
     * Create a <code>frickl.image_tags</code> table reference
     */
    public ImageTags() {
        this(DSL.name("image_tags"), null);
    }

    /**
     * Create an aliased <code>frickl.image_tags</code> table reference
     */
    public ImageTags(String alias) {
        this(DSL.name(alias), IMAGE_TAGS);
    }

    /**
     * Create an aliased <code>frickl.image_tags</code> table reference
     */
    public ImageTags(Name alias) {
        this(alias, IMAGE_TAGS);
    }

    private ImageTags(Name alias, Table<ImageTagsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageTags(Name alias, Table<ImageTagsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table joins `images` and `tags` and therefore defines which tags an image is tagged with."));
    }

    public <O extends Record> ImageTags(Table<O> child, ForeignKey<O, ImageTagsRecord> key) {
        super(child, key, IMAGE_TAGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Frickl.FRICKL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IMAGE_TAGS_PRIMARY, Indexes.IMAGE_TAGS_TAG_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ImageTagsRecord> getPrimaryKey() {
        return Keys.KEY_IMAGE_TAGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ImageTagsRecord>> getKeys() {
        return Arrays.<UniqueKey<ImageTagsRecord>>asList(Keys.KEY_IMAGE_TAGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ImageTagsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ImageTagsRecord, ?>>asList(Keys.IMAGE_TAGS_IBFK_1, Keys.IMAGE_TAGS_IBFK_2);
    }

    public Images images() {
        return new Images(this, Keys.IMAGE_TAGS_IBFK_1);
    }

    public Tags tags() {
        return new Tags(this, Keys.IMAGE_TAGS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTags as(String alias) {
        return new ImageTags(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTags as(Name alias) {
        return new ImageTags(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageTags rename(String name) {
        return new ImageTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageTags rename(Name name) {
        return new ImageTags(name, null);
    }
}
