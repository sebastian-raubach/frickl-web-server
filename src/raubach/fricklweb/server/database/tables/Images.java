/*
 * This file is generated by jOOQ.
 */
package raubach.fricklweb.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;
import java.util.*;

import javax.annotation.*;

import raubach.fricklweb.server.database.*;
import raubach.fricklweb.server.database.tables.records.*;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.11.9"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Images extends TableImpl<ImagesRecord>
{

	/**
	 * The reference instance of <code>frickl.images</code>
	 */
	public static final  Images                              IMAGES           = new Images();
	private static final long                                serialVersionUID = 1790479921;
	/**
	 * The column <code>frickl.images.id</code>.
	 */
	public final         TableField<ImagesRecord, Integer>   ID               = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");
	/**
	 * The column <code>frickl.images.path</code>.
	 */
	public final         TableField<ImagesRecord, String>    PATH             = createField("path", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");
	/**
	 * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
	 */
	@java.lang.Deprecated
	public final         TableField<ImagesRecord, Object>    EXIF             = createField("exif", org.jooq.impl.DefaultDataType.getDefaultDataType("\"frickl\".\"images_exif\""), this, "");
	/**
	 * The column <code>frickl.images.album_id</code>.
	 */
	public final         TableField<ImagesRecord, Integer>   ALBUM_ID         = createField("album_id", org.jooq.impl.SQLDataType.INTEGER, this, "");
	/**
	 * The column <code>frickl.images.created_on</code>.
	 */
	public final         TableField<ImagesRecord, Timestamp> CREATED_ON       = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
	/**
	 * The column <code>frickl.images.updated_on</code>.
	 */
	public final         TableField<ImagesRecord, Timestamp> UPDATED_ON       = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

	/**
	 * Create a <code>frickl.images</code> table reference
	 */
	public Images()
	{
		this(DSL.name("images"), null);
	}

	/**
	 * Create an aliased <code>frickl.images</code> table reference
	 */
	public Images(String alias)
	{
		this(DSL.name(alias), IMAGES);
	}

	/**
	 * Create an aliased <code>frickl.images</code> table reference
	 */
	public Images(Name alias)
	{
		this(alias, IMAGES);
	}

	private Images(Name alias, Table<ImagesRecord> aliased)
	{
		this(alias, aliased, null);
	}

	private Images(Name alias, Table<ImagesRecord> aliased, Field<?>[] parameters)
	{
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> Images(Table<O> child, ForeignKey<O, ImagesRecord> key)
	{
		super(child, key, IMAGES);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ImagesRecord> getRecordType()
	{
		return ImagesRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema()
	{
		return Frickl.FRICKL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes()
	{
		return Arrays.<Index>asList(Indexes.IMAGES_ALBUM_ID, Indexes.IMAGES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ImagesRecord, Integer> getIdentity()
	{
		return Keys.IDENTITY_IMAGES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ImagesRecord> getPrimaryKey()
	{
		return Keys.KEY_IMAGES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ImagesRecord>> getKeys()
	{
		return Arrays.<UniqueKey<ImagesRecord>>asList(Keys.KEY_IMAGES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ImagesRecord, ?>> getReferences()
	{
		return Arrays.<ForeignKey<ImagesRecord, ?>>asList(Keys.IMAGES_IBFK_1);
	}

	public Albums albums()
	{
		return new Albums(this, Keys.IMAGES_IBFK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Images as(String alias)
	{
		return new Images(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Images as(Name alias)
	{
		return new Images(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Images rename(String name)
	{
		return new Images(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Images rename(Name name)
	{
		return new Images(name, null);
	}
}
